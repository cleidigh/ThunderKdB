{"version":3,"sources":["webpack://changelogger/./node_modules/webextension-polyfill-ts/lib/index.js","webpack://changelogger/external \"browser\"","webpack://changelogger/webpack/bootstrap","webpack://changelogger/webpack/runtime/make namespace object","webpack://changelogger/./src/OptionsInterface.ts","webpack://changelogger/./src/colorscheme/setColorScheme.ts","webpack://changelogger/./src/pages/options/options.ts"],"names":["exports","browser","module","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty","value","Options","opts","_a","_b","_c","_d","this","badge","notification","max","ignore_no_changelogs","setColorScheme","e","matches","document","documentElement","dataset","theme","getElementById","colorScheme","window","matchMedia","clearChangelogsButton","addEventListener","async","options","toString","JSON","parse","parseInt","changelogs"],"mappings":"8DAGAA,EAAQC,QAAU,EAAlB,M,QCHAC,EAAOF,QAAUC,UCCbE,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAIE,EAASC,EAAyBE,GAAY,CAGjDL,QAAS,IAOV,OAHAQ,EAAoBH,GAAUH,EAAQA,EAAOF,QAASI,GAG/CF,EAAOF,QCpBfI,EAAoBK,EAAKT,IACH,oBAAXU,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeb,EAASU,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeb,EAAS,aAAc,CAAEc,OAAO,K,mBCLhD,MAAMC,EACT,YAAYC,GACR,IAAIC,EAAIC,EAAIC,EAAIC,EAChBJ,EAAOA,QAAmCA,EAAO,GACjDK,KAAKC,MAA8B,QAArBL,EAAKD,EAAKM,aAA0B,IAAPL,GAAgBA,EAC3DI,KAAKE,aAA4C,QAA5BL,EAAKF,EAAKO,oBAAiC,IAAPL,GAAgBA,EACzEG,KAAKG,IAA0B,QAAnBL,EAAKH,EAAKQ,WAAwB,IAAPL,EAAgBA,EAAK,GAC5DE,KAAKI,qBAA4D,QAApCL,EAAKJ,EAAKS,4BAAyC,IAAPL,GAAgBA,GCH1F,SAASM,EAAeC,GACvBA,EAAEC,QACFC,SAASC,gBAAgBC,QAAQC,MAAQ,OAGzCH,SAASC,gBAAgBC,QAAQC,MAAQ,QCTjD,EAAQ,KAIR,MAAMV,EAAQO,SAASI,eAAe,SAChCV,EAAeM,SAASI,eAAe,gBACvCT,EAAMK,SAASI,eAAe,OAC9BR,EAAuBI,SAASI,eAAe,wBAC/CC,EAAcC,OAAOC,WAAW,gCAChCC,EAAwBR,SAASI,eAAe,yBA6BtDP,EAAeQ,GACfL,SAASS,iBAAiB,oBApB1BC,iBACI,MAAMvB,EAAO,IAAID,SAAe,EAAAd,QAAA,qBAA6BuC,SAC7DlB,EAAMR,MAAQE,EAAKM,MAAMmB,WACzBlB,EAAaT,MAAQE,EAAKO,aAAakB,WACvCjB,EAAIV,MAAQE,EAAKQ,IAAIiB,WACrBhB,EAAqBX,MAAQE,EAAKS,qBAAqBgB,cAgB3DZ,SAASS,iBAAiB,UAX1B,WACI,MAAME,EAAU,CACZlB,MAAOoB,KAAKC,MAAMrB,EAAMR,OACxBS,aAAcmB,KAAKC,MAAMpB,EAAaT,OACtCU,IAAKoB,SAASpB,EAAIV,OAClBW,qBAAsBiB,KAAKC,MAAMlB,EAAqBX,QAE1D,EAAAb,QAAA,kBAA0B,CAAEuC,eAKhCN,EAAYI,iBAAiB,SAAUZ,GACvCW,EAAsBC,iBAAiB,SA7BvC,WACI,EAAArC,QAAA,kBAA0B,CAAE4C,WAAY,S","file":"options.bundle.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\nexports.browser = require(\"webextension-polyfill\");\n","module.exports = browser;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export class Options {\n    constructor(opts) {\n        var _a, _b, _c, _d;\n        opts = opts !== null && opts !== void 0 ? opts : {};\n        this.badge = (_a = opts.badge) !== null && _a !== void 0 ? _a : true;\n        this.notification = (_b = opts.notification) !== null && _b !== void 0 ? _b : true;\n        this.max = (_c = opts.max) !== null && _c !== void 0 ? _c : 10;\n        this.ignore_no_changelogs = (_d = opts.ignore_no_changelogs) !== null && _d !== void 0 ? _d : false;\n    }\n}\n","/**\n * Sets the colorscheme of tahe page\n * @param e The media query for the colorscheme setting\n */\nexport function setColorScheme(e) {\n    if (e.matches) {\n        document.documentElement.dataset.theme = \"dark\";\n    }\n    else {\n        document.documentElement.dataset.theme = \"light\";\n    }\n}\n","require(\"./options.css\");\nimport { browser } from \"webextension-polyfill-ts\";\nimport { Options } from \"../../OptionsInterface\";\nimport { setColorScheme } from \"../../colorscheme/setColorScheme\";\nconst badge = document.getElementById(\"badge\");\nconst notification = document.getElementById(\"notification\");\nconst max = document.getElementById(\"max\");\nconst ignore_no_changelogs = document.getElementById(\"ignore_no_changelogs\");\nconst colorScheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\nconst clearChangelogsButton = document.getElementById(\"clearChangelogsButton\");\n/**\n * Clears the list of changelogs saved in storage\n */\nfunction clearChangelogs() {\n    browser.storage.local.set({ changelogs: [] });\n}\n/**\n * Load the options from storage into the DOM\n */\nasync function load() {\n    const opts = new Options((await browser.storage.local.get()).options);\n    badge.value = opts.badge.toString();\n    notification.value = opts.notification.toString();\n    max.value = opts.max.toString();\n    ignore_no_changelogs.value = opts.ignore_no_changelogs.toString();\n}\n/**\n * Save the options from the DOM into storage\n */\nfunction save() {\n    const options = {\n        badge: JSON.parse(badge.value),\n        notification: JSON.parse(notification.value),\n        max: parseInt(max.value),\n        ignore_no_changelogs: JSON.parse(ignore_no_changelogs.value)\n    };\n    browser.storage.local.set({ options });\n}\nsetColorScheme(colorScheme);\ndocument.addEventListener(\"DOMContentLoaded\", load);\ndocument.addEventListener(\"change\", save);\ncolorScheme.addEventListener(\"change\", setColorScheme);\nclearChangelogsButton.addEventListener(\"click\", clearChangelogs);\n"],"sourceRoot":""}