[
  {
    "namespace": "SL3U",
    "functions": [
      {
        "name":"alert",
        "type":"function",
        "async":true,
        "parameters":[
          {
            "name":"title",
            "type":"string"
          },
          {
            "name":"text",
            "type":"string"
          }
        ]
      },
      {
        "name":"confirmAction",
        "type":"function",
        "async":true,
        "parameters":[
          {
            "name":"title",
            "type":"string"
          },
          {
            "name":"message",
            "type":"string"
          }
        ]
      },
      {
        "name":"confirmCheck",
        "type":"function",
        "async":true,
        "parameters":[
          {
            "name":"title",
            "type":"string"
          },
          {
            "name":"message",
            "type":"string"
          },
          {
            "name": "checkMessage",
            "type": "string"
          },
          {
            "name": "state",
            "type": "boolean"
          }
        ]
      },
      {
        "name": "generateMsgId",
        "type": "function",
        "async": true,
        "description": "",
        "parameters": [
          {
            "name": "idkey",
            "type": "string"
          }
        ]
      },
      {
        "name": "saveAsDraft",
        "type": "function",
        "async": true,
        "description": "",
        "parameters": [
          {
            "name": "newMessageId",
            "type": "string"
          }
        ]
      },
      {
        "name": "preSendCheck",
        "type": "function",
        "async": true,
        "description": "Check empty subject etc",
        "parameters": []
      },
      {
        "name": "expandRecipients",
        "type": "function",
        "async": true,
        "description": "Expand recipient lists.",
        "parameters": [
          {
            "name": "field",
            "type": "string"
          }
        ]
      },
      {
        "name": "sendNow",
        "type": "function",
        "async": true,
        "description": "Initiate send from current composition window",
        "parameters": []
      },
      {
        "name": "builtInSendLater",
        "type": "function",
        "async": true,
        "description": "Initiate send from current composition window using thunderbirds builtin send later funcion.",
        "parameters": []
      },
      {
        "name": "sendRaw",
        "type": "function",
        "async": true,
        "description": "Sends email from raw message content",
        "parameters": [
          {
            "name": "content",
            "type": "string",
            "description": "Contents of message to send"
          },
          {
            "name": "sendUnsentMsgs",
            "type": "boolean",
            "description": "Whether to trigger send operation on outbox messages."
          }
        ]
      },
      {
        "name": "saveMessage",
        "type": "function",
        "async": true,
        "description": "Replace a message with new raw content",
        "parameters": [
          {
            "name": "accountId",
            "type": "string",
            "description": "New message contents"
          },
          {
            "name": "path",
            "type": "string",
            "description": "New message contents"
          },
          {
            "name": "content",
            "type": "string",
            "description": "New message contents"
          }
        ]
      },
      {
        "name": "getAllScheduledMessages",
        "type": "function",
        "async": true,
        "description": "Get a raw message.",
        "parameters": [
          {
            "name": "accountId",
            "type": "string"
          },
          {
            "name": "path",
            "type": "string"
          }
        ]
      },
      {
        "name": "deleteDraftByUri",
        "type": "function",
        "async": true,
        "description": "Delete a draft message",
        "parameters": [
          {
            "name": "accountId",
            "type": "string"
          },
          {
            "name": "path",
            "type": "string"
          },
          {
            "name": "draftUri",
            "type": "string"
          }
        ]
      },
      {
        "name": "compactFolder",
        "type": "function",
        "async": true,
        "description": "Compact a folder.",
        "parameters": [
          {
            "name": "accountId",
            "type": "string",
            "description": "Account ID associated with folder (ignored for 'outbox' path)"
          },
          {
            "name": "path",
            "type": "string",
            "description": "Path of folder to compact, or 'outbox' for unsent messages folder"
          }
        ]
      },
      {
        "name":"setHeader",
        "type":"function",
        "async":true,
        "description":"Add a custom header to the current compose message",
        "parameters": [
          {
            "name":"name",
            "type":"string",
            "description":"Name of the header to set"
          },
          {
            "name":"value",
            "type":"string",
            "description":"Value of custom header"
          }
        ]
      },
      {
        "name":"editingMessage",
        "type":"function",
        "async":true,
        "description":"Fetch value of message header from window with id",
        "parameters": [
          {
            "name":"msgId",
            "type":"string",
            "description":"message-id to find"
          }
        ]
      },
      {
        "name": "setLegacyPref",
        "type": "function",
        "description": "Sets a preference.",
        "async": true,
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "description": "The preference name."
          },
          {
            "name": "dtype",
            "type": "string",
            "description": "Data type of the preference."
          },
          {
            "name": "value",
            "type": "string",
            "description": "Preference value as a string."
          }
        ]
      },
      {
        "name": "getLegacyPref",
        "type": "function",
        "description": "Gets a preference.",
        "async": true,
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "description": "The preference name"
          },
          {
            "name": "dtype",
            "type": "string",
            "description": "Data type of the preference"
          },
          {
            "name": "defVal",
            "type": "string",
            "description": "Fallback value if nothing is returned."
          }
        ]
      },
      {
        "name": "notifyStorageLocal",
        "type": "function",
        "description": "Make local indexedDB storage available to an overlay extension implementing an observer for 'extension:storage-local'.",
        "async": true,
        "parameters": [
          {
            "name": "dataStr",
            "type": "string",
            "description": "The storage.local object for this extension."
          },
          {
            "name": "startup",
            "type": "boolean",
            "description": "If true, we are in startup, wait for ready notification; otherwise send data."
          }
        ]
      },
      {
        "name": "setCustomDBHeaders",
        "type": "function",
        "async": true,
        "description": "",
        "parameters": []
      },
      {
        "name": "countUnsentMessages",
        "type": "function",
        "async": true,
        "description": "",
        "parameters": []
      },
      {
        "name": "startObservers",
        "type": "function",
        "async": true,
        "description": "",
        "parameters": []
      },
      {
        "name":"injectScript",
        "type":"function",
        "description":"Inject script into a global document.",
        "async":true,
        "parameters": [
          {
            "name":"filename",
            "type":"string",
            "description":"Path to script file."
          }
        ]
      },
      {
        "name":"bindKeyCodes",
        "type":"function",
        "async":true,
        "description":"Bind Alt+Shift+Enter shortcut in composition windows",
        "parameters":[]
      }
    ],
    "events": [
      {
        "name": "onKeyCode",
        "type": "function",
        "description": "Fires from message compose windows on Alt+Shift+Enter",
        "parameters": []
      }
    ]
  }
]
